apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-parcelize'
apply plugin: 'kotlin-kapt'
apply plugin: 'androidx.navigation.safeargs.kotlin'
apply plugin: "kotlin-allopen"

def getProperty(String filename, String propName) {
    def propsFile = rootProject.file(filename)
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        if (props[propName] != null) {
            return props[propName]
        } else {
            print("No such property " + propName + " in file " + filename)
        }
    } else {
        print(filename + " does not exist!")
    }
}

allOpen {
    // allows mocking for classes w/o directly opening them for release builds
    annotation 'com.mustafa.movieguideapp.testing.OpenClass'
}
android {
    compileSdkVersion rootProject.compileSdkVersion
    defaultConfig {
        applicationId "com.mustafa.movieguideapp"
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        testInstrumentationRunner "com.mustafa.movieguideapp.util.MovieGuideTestRunner"
        buildConfigField "String", "TMDB_API_KEY", "\"e79a859ffb63de1677a00f1b7665f552\""
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    lintOptions {
        lintConfig rootProject.file('lint.xml')
    }
    kapt {
        correctErrorTypes = true
    }
    buildFeatures {
        dataBinding = true
        viewBinding true
    }
    dexOptions {
        preDexLibraries true
    }
    sourceSets {

        String sharedTestDir = "src/test-common/java"
        test {
            java.srcDirs += sharedTestDir
        }
        androidTest {
            java.srcDirs += sharedTestDir
        }
//        androidTest.java.srcDirs += "src/test-common/java"
//        test.java.srcDirs += "src/test-common/java"
    }
    buildTypes {
        debug {
            minifyEnabled false
            testCoverageEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguardTest-rules.pro'
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguardTest-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testOptions.unitTests {
        returnDefaultValues = true
        all {
            testLogging {
                events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            }
        }
    }
}

dependencies {
    def androidxVersion = '1.0.0'
    def androidFragment = '1.2.5'
    def recyclerVersion = '1.1.0'
    def ankoVersion = '0.10.8'
    def archComponentVersion = '2.1.0'
    def roomVersion = '2.2.5'
    def lifecycleVersion = '2.2.0'
    def daggerVersion = '2.29.1'
    def retrofitVersion = '2.9.0'
    def googleJsonVersion = '2.8.6'
    def okhttpVersion = '4.9.0'
    def timberVersion = '4.7.1'
    def stethoVersion = '1.5.1'
    def glideVersion = '4.11.0'
    def glidePaletteVersion = '2.1.2'
    def androidTagViewVersion = '1.1.4'
    def expandableTextViewVersion = '0.1.4'
    def mockitoKotlinVersion = '2.2.0'
    def junitVersion = '4.13.1'
    def espressoVersion = '3.3.0'
    def androidxTestCoreVersion = '1.3.0'
    def archTestVersion = '2.1.0'
    def mockitoAndroid = '3.3.3'

    // support library
    implementation "androidx.appcompat:appcompat:1.3.0-alpha02"
    implementation 'androidx.activity:activity-ktx:1.1.0'
    implementation "androidx.fragment:fragment-ktx:$androidFragment"
    implementation 'com.google.android.material:material:1.2.1'
    implementation "androidx.palette:palette-ktx:$androidxVersion"
    implementation "androidx.recyclerview:recyclerview:$recyclerVersion"
    implementation "androidx.constraintlayout:constraintlayout:2.0.4"

    // kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    implementation "org.jetbrains.anko:anko:$ankoVersion"

    // architecture components
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycleVersion"
    implementation "androidx.room:room-runtime:$roomVersion"
    implementation "androidx.room:room-ktx:$roomVersion"
    kapt "androidx.room:room-compiler:$roomVersion"

    //Splash Screen Library
    implementation 'com.rbddevs.splashy:splashy:1.3.0'

    // navigation
    implementation "androidx.navigation:navigation-fragment-ktx:2.3.2"
    implementation "androidx.navigation:navigation-ui-ktx:2.3.2"

    // dependency injection
    implementation "com.google.dagger:dagger:2.30"
    implementation "com.google.dagger:dagger-android:2.30"
    implementation "com.google.dagger:dagger-android-support:2.30"
    kapt "com.google.dagger:dagger-compiler:$daggerVersion"
    kapt "com.google.dagger:dagger-android-processor:2.30"

    debugImplementation "androidx.fragment:fragment-testing:$androidFragment"
    debugImplementation "androidx.test:core:$androidxTestCoreVersion"
    debugImplementation "androidx.test:monitor:$androidxTestCoreVersion"

    // network
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttpVersion"
    implementation "com.google.code.gson:gson:$googleJsonVersion"


    // glide
    implementation "com.github.bumptech.glide:glide:$glideVersion"
    implementation "com.github.florent37:glidepalette:$glidePaletteVersion"
    kapt "com.github.bumptech.glide:compiler:$glideVersion"


    // debugging
    implementation "com.jakewharton.timber:timber:$timberVersion"
    implementation "com.facebook.stetho:stetho:$stethoVersion"
    implementation "com.facebook.stetho:stetho-okhttp3:$stethoVersion"

    // custom view
    implementation "co.lujun:androidtagview:$androidTagViewVersion"
    implementation "com.ms-square:expandableTextView:$expandableTextViewVersion"

    // unit test
    testImplementation "junit:junit:$junitVersion"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$mockitoKotlinVersion"
    testImplementation "androidx.arch.core:core-testing:$archComponentVersion"
    testImplementation "com.squareup.okhttp3:mockwebserver:$okhttpVersion"

    //Core Library
    androidTestImplementation "androidx.test:core:$androidxTestCoreVersion"

    // AndroidJUnitRunner and JUnit Rules
    androidTestImplementation "androidx.test:rules:1.3.0"
    androidTestImplementation "androidx.test:runner:1.3.0"

    // Assertions
    androidTestImplementation "androidx.test.ext:junit:1.1.2"
    androidTestImplementation 'androidx.test.ext:truth:1.3.0'
    androidTestImplementation 'com.google.truth:truth:1.1'

    androidTestImplementation "androidx.arch.core:core-testing:$archTestVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$espressoVersion"

    androidTestImplementation "org.mockito:mockito-android:$mockitoAndroid"
    androidTestImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$mockitoKotlinVersion"
    androidTestImplementation "androidx.navigation:navigation-testing:2.3.2"

    //Leak canary: LeakCanary is a memory leak detection library for Android.
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.5'


    // Barista's scrollTo(R.id.button) works on all kinds of scrollable views, also on NestedScroll
    androidTestImplementation "com.schibsted.spain:barista:3.3.0"

}


// we need all open to run tests which  a we enable only for debug builds.
project.tasks.whenTaskAdded {
    if (it.name == "testReleaseUnitTest") {
        it.enabled = false
    }
}